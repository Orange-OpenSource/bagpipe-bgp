[BGP]
local_address=192.168.100.177
peers=192.168.0.101
my_as=64512
enable_rtc=True


[API]
# BGP component API IP address and port
api_host=localhost 
api_port=8082


[DATAPLANE_DRIVER_IPVPN]
# IP VPN dataplane driver class
# (bagpipe.bgp, bgp., or bagpipe.bgp.ipvpn can be omitted)
# Example values: 
#dataplane_driver = bagpipe.bgp.vpn.ipvpn.DummyDataplaneDriver
#dataplane_driver = bgp.vpn.ipvpn.mpls_linux_dataplane.MPLSLinux32DataplaneDriver
#dataplane_driver = mpls_linux_dataplane.MPLSLinuxDataplaneDriver
#dataplane_driver = mpls_ovs_dataplane.MPLSOVSDataplaneDriver
dataplane_driver = DummyDataplaneDriver

# OVS bridge to use (defaults to br-int)
#ovs_bridge=ovsbr0

# MPLS outgoing interface (for MPLSLinuxDataplaneDriver and MPLSOVSDataplaneDriver)
#
# (not specifying an mpls_interface or using the '*gre*' special value 
# means that the driver will instantiate a tunnel interface and use an 
# MPLS/GRE encapsulation)
# mpls_interface=*gre*
mpls_interface=*gre*

# Uncomment the following to allow the use of standard MPLS-o-GRE in OVS
# (rather than MPLS-o-Eth-o-GRE). 
# This currently requires a modified OVS, which can be found at: 
#   https://github.com/tmmorin/openvswitch/tree/grempls
#
# gre_tunnel_options="options:l3port=true"

# Support VXLAN encapsulation of IP VPN traffic with the 
# MPLSOVSDataplaneDriver.
#
# Note well: this is non-standard and aimed at making it easier
# to test IP VPN until OVS 2.4 is shipping
#
# WARNING: this option does *not* co-exist with the EVPN
#          LinuxVXLANDataplaneDriver (can't have both OVS and the linux
#          kernel native VXLAN stack process VXLAN)
#
#vxlan_encap=True

# local IP address (that others will use to send us encapsulated packets, and that
# we will use to send)
# Note: does not need to be specified if different than the BGP local_address
# dataplane_local_address=1.2.3.4

# required for the MPLSOVSDataplaneDriver if used with the E-VPNLinuxVXLANHybridDataplaneDriver
ovsbr_interfaces_mtu=4000

# for MPLSOVSDataplaneDriver, control whether or not the VRF will
# reply to all ARP requests on the subnet and impersonate the gateway
# (defaults to True)
#proxy_arp=False

[DATAPLANE_DRIVER_EVPN]
# EVPN dataplane driver class
# (bagpipe.bgp, bgp., or bagpipe.bgp.evpn can be omitted)
# Example values:
#dataplane_driver = DummyDataplaneDriver
#dataplane_driver = linux_vxlan.LinuxVXLANDataplaneDriver
#dataplane_driver = linux_vxlan.LinuxVXLANHybridDataplaneDriver
dataplane_driver = DummyDataplaneDriver

# required to get proper MTU with the LinuxVXLANHybridDataplaneDriver
ovsbr_interfaces_mtu=4000

# The LinuxVXLANDataplaneDriver and LinuxVXLANHybridDataplaneDriver
# allow to force the VXLAN destination port IF iproute2 is at version
# 3.14 or above (i.e. >= "ss140411" with "ip -V").
#
# to use standard IANA port for VXLAN:
#vxlan_dst_port=4789
#
# to interoperate with switches or boxes not having the ability to
# use another port than the linux kernel default 8472:
#vxlan_dst_port=8472

# local IP address (that others will use to send us encapsulated packets, and that
# we will use to send)
# Note: does not need to be specified if different than the BGP local_address
#dataplane_local_address=1.2.3.4

